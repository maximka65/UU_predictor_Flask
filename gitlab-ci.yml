workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main" 
      variables:                                 
        ENVIRONMENT_NAME: production
        TAG: latest
        CI_SSH_HOST: ${CI_SSH_HOST_PROD}

    - if: $CI_COMMIT_REF_NAME ==  "staging"
      variables:
        ENVIRONMENT_NAME: staging
        TAG: staging
        CI_SSH_HOST: ${CI_SSH_HOST_STAGING}

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:${TAG}" .
    - docker push "$CI_REGISTRY_IMAGE:${TAG}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

docker-deploy:
  script:
    - chmod 600 "${CI_SSH_KEY}"
    - ssh -o StrictHostKeyChecking=no -i "${CI_SSH_KEY}" "${CI_SSH_USER}@${CI_SSH_HOST}" "docker rm --force ${CI_PROJECT_NAME}"
    - ssh -o StrictHostKeyChecking=no -i "${CI_SSH_KEY}" "${CI_SSH_USER}@${CI_SSH_HOST}" "docker login -u ${DOCKER_REG_USER} -p ${DOCKER_REG_PASSWORD} ${CI_REGISTRY}"
    - ssh -o StrictHostKeyChecking=no -i "${CI_SSH_KEY}" "${CI_SSH_USER}@${CI_SSH_HOST}" "docker pull ${CI_REGISTRY_IMAGE}:${TAG}"
    - ssh -o StrictHostKeyChecking=no -i "${CI_SSH_KEY}" "${CI_SSH_USER}@${CI_SSH_HOST}" "docker run --restart unless-stopped -d -p 5000:5000 --name ${CI_PROJECT_NAME} ${CI_REGISTRY_IMAGE}:${TAG}"
